/**
 * Accounting
 * This is an accounting server. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { RequestTransaction } from '../model/requestTransaction';
import { ResponseCreated } from '../model/responseCreated';
import { ResponseTransaction } from '../model/responseTransaction';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TransactionsService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create a transaction
     * 
     * @param body Transaction to save
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public transactionsCreate(body: RequestTransaction, observe?: 'body', reportProgress?: boolean): Observable<ResponseCreated>;
    public transactionsCreate(body: RequestTransaction, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseCreated>>;
    public transactionsCreate(body: RequestTransaction, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseCreated>>;
    public transactionsCreate(body: RequestTransaction, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling transactionsCreate.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ResponseCreated>(`${this.basePath}/transactions`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a transaction
     * 
     * @param transactionId Id of the transaction
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public transactionsDelete(transactionId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public transactionsDelete(transactionId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public transactionsDelete(transactionId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public transactionsDelete(transactionId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (transactionId === null || transactionId === undefined) {
            throw new Error('Required parameter transactionId was null or undefined when calling transactionsDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/transactions/${encodeURIComponent(String(transactionId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all transactions
     * 
     * @param after Only return transactions after this date
     * @param before Only return transactions before this date
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public transactionsFindAll(after?: string, before?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ResponseTransaction>>;
    public transactionsFindAll(after?: string, before?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ResponseTransaction>>>;
    public transactionsFindAll(after?: string, before?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ResponseTransaction>>>;
    public transactionsFindAll(after?: string, before?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (after !== undefined && after !== null) {
            queryParameters = queryParameters.set('after', <any>after);
        }
        if (before !== undefined && before !== null) {
            queryParameters = queryParameters.set('before', <any>before);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ResponseTransaction>>(`${this.basePath}/transactions`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a transaction
     * 
     * @param body Transaction to save
     * @param transactionId Id of the transaction
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public transactionsUpdate(body: RequestTransaction, transactionId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public transactionsUpdate(body: RequestTransaction, transactionId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public transactionsUpdate(body: RequestTransaction, transactionId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public transactionsUpdate(body: RequestTransaction, transactionId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling transactionsUpdate.');
        }

        if (transactionId === null || transactionId === undefined) {
            throw new Error('Required parameter transactionId was null or undefined when calling transactionsUpdate.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/transactions/${encodeURIComponent(String(transactionId))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
